#!/bin/bash

export VISUAL=vim
export EDITOR="$VISUAL"
export PATH=/sbin:~/bin:~/tools:~/work/arcanist/bin:$PATH:~/work/libphutil/scripts/utils

TERM=xterm

cecho() {
  local code="\033["
  case "$1" in
    black  | bk) color="${code}0;30m";;
    red    |  r) color="${code}1;31m";;
    green  |  g) color="${code}1;32m";;
    yellow |  y) color="${code}1;33m";;
    blue   |  b) color="${code}1;34m";;
    purple |  p) color="${code}1;35m";;
    cyan   |  c) color="${code}1;36m";;
    gray   | gr) color="${code}1;30m";;
    *) local text="$1"
  esac
  [ -z "$text" ] && local text="$color$2${code}0m"
  echo -e "$text"
}

_cecho_test() {
	ret="test"
	cecho bk "$ret"
	cecho r "$ret"
	cecho g "$ret"
	cecho y "$ret"
	cecho b "$ret"
	cecho p "$ret"
	cecho c "$ret"
	cecho gr "$ret"
	cecho 34 "$ret"
}

__parse_git_branch() {
	#branch_symbol=""
	branch_symbol=""
	type git >/dev/null 2>&1
	if [ "$?" -ne 0 ]; then
		return
	fi

	#git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \[\1\]/'

	# Quit if this is not a Git repo.
	branch=$(git symbolic-ref HEAD 2> /dev/null)
	if [[ -z $branch ]] ; then
		# attempt to get short-sha-name
		branch=":$(git rev-parse --short HEAD 2> /dev/null)"
	fi
	if [ "$?" -ne 0 ]; then
		# this must not be a git repo
		return
	fi

	# Clean off unnecessary information.
	branch=${branch#refs\/heads\/}

	cecho g "${branch_symbol} ${branch}"
}
export __parse_git_branch

__parse_git_ahead() {
	type git >/dev/null 2>&1
	if [ "$?" -ne 0 ]; then
		return
	fi

	#[[ -z $(git show HEAD 2> /dev/null) ]] && return

	# check if git
	[[ -z $(git rev-parse --git-dir 2> /dev/null) ]] && return

	symbolic_ref=$(git symbolic-ref -q HEAD)
	[[ -z "${symbolic_ref}" ]] && return

	tracking_branch=$(git for-each-ref --format='%(upstream:short)' ${symbolic_ref})

	# creates global variables $1 and $2 based on left vs. right tracking
	set -- $(git rev-list --left-right --count $tracking_branch...HEAD)

	behind=$1
	ahead=$2

	# print out the information
	if [[ $behind -gt 0 ]] ; then
		local ret="↓$behind"
	fi
	if [[ $ahead -gt 0 ]] ; then
		local ret="${ret}↑$ahead"
	fi
	cecho b "$ret"
}
export __parse_git_ahead

__parse_git_stats(){
	type git >/dev/null 2>&1
	if [ "$?" -ne 0 ]; then
		return
	fi

	# check if git
	[[ -z $(git rev-parse --git-dir 2> /dev/null) ]] && return

	# return the number of modified but not staged items
	modified=$(git ls-files --modified `git rev-parse --show-cdup` | wc -l)
	cecho p "+$modified" | tr -d '[:space:]'
}
export __parse_git_stats

__git_str()
{
	A=`__parse_git_branch`
	B=`__parse_git_ahead`
	C=`__parse_git_stats`
	echo "$B $C $A"
    echo""
}
export __git_str

PS1='╔║${debian_chroot:+($debian_chroot)}\[\033[1;33m\]\w\[\033[00m\] $(__git_str)\n╚═>> '
#PS1='${debian_chroot:+($debian_chroot)}\[\033[1;35m\]\w\[\033[00m\]\n>> '

#case ${TERM} in
#    *)
#        # user command to change default pane title on demand
#        function title { TMUX_PANE_TITLE="$*"; }
#
#        # function that performs the title update (invoked as PROMPT_COMMAND)
#        function update_title { printf "\033]2;%s\033\\" "${1:-$TMUX_PANE_TITLE}"; }
#
#        # default pane title is the name of the current process (i.e. 'bash')
#        TMUX_PANE_TITLE=$(ps -o comm $$ | tail -1)
#
#        # Reset title to the default before displaying the command prompt
#        PROMPT_COMMAND=${PROMPT_COMMAND:+$PROMPT_COMMAND; }'update_title'
#
#        # Update title before executing a command: set it to the command
#        trap 'update_title "$BASH_COMMAND"' DEBUG
#
#        ;;
#esac

# for git information of tmux-powerline
#PS1="$PS1"'$([ -n "$TMUX" ] && tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'

if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
fi

#All commands have been installed with the prefix 'g'.
#If you do not want the prefix, install using the "with-default-names" option.
#
#If you need to use these commands with their normal names, you
#can add a "gnubin" directory to your PATH from your bashrc like:
#
#    PATH="/usr/local/opt/make/libexec/gnubin:$PATH"
#
#Additionally, you can access their man pages with normal names if you add
#the "gnuman" directory to your MANPATH from your bashrc as well:
#
#    MANPATH="/usr/local/opt/make/libexec/gnuman:$MANPATH"

#curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash && echo "source ~/.git-completion.bash" >> ~/.bash_profile && source ~/.bash_profile
source ~/.git-completion.bash

alias vi="vim"
#alias vim="nvim"
#alias vi="nvim"
alias d="sdcv"
alias ls='gls --color=auto'
alias ll='gls --color=auto -l'
alias la='gls --color=auto -A'
alias l='gls --color=auto -CF'
alias rr='xset r rate 250 50'
alias rm='grm'
alias cp='gcp'
alias rsync='rsync --filter=":- /Users/ziyang163514/.gitignore_global"'

#function ssh() {
#	tmux setenv TMUX_SSHIP_$(tmux display -p "#D" | tr -d %) "$*"
#	/usr/bin/ssh $*
#	tmux setenv -u TMUX_SSHIP_$(tmux display -p "#D" | tr -d %)
#}
#
#function sshpass() {
#	tmux setenv TMUX_SSHIP_$(tmux display -p "#D" | tr -d %) "$*"
#	/usr/bin/sshpass $*
#	tmux setenv -u TMUX_SSHIP_$(tmux display -p "#D" | tr -d %)
#}

[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] && source ~/.autojump/etc/profile.d/autojump.sh
alias s='j -s'

#OS X Terminal equivalent of Ctrl+Left / Ctrl+Right
#https://apple.stackexchange.com/questions/1626/os-x-terminal-equivalent-of-ctrlleft-ctrlright
bind '"\e[5C": forward-word'
bind '"\e[5D": backward-word'
bind '"\e[1;5C": forward-word'
bind '"\e[1;5D": backward-word'

[ -e ~/.bashrc_ignored ] && . ~/.bashrc_ignored
[ -e ~/tools/common.sh ] && . ~/tools/common.sh
[ -e ~/.bashrc_4work ] && . ~/.bashrc_4work
